Description: >
    This stack contains all server configurations

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType:
        Description: Amazon EC2 instance type for the instances
        Type: String
        Default: t3.medium

    LatestAmiId:
        Description: Region specific image from the Parameter Store
        Type: String
        Default: ami-0747bdcabd34c712a

    AutoScaleMaxSize:
        Description: Max size for Auto Scaling
        Type: String
        Default: '3'

    AutoScaleMinSize:
        Description: Min size for Auto Scaling
        Type: String
        Default: '2'

Resources:   

    #region S3 bucket & access role
    
    S3Bucket:
        Type: 'AWS::S3::Bucket'
        Description: Bucket on which we will attach and test bucket policy
        Properties:
            AccessControl: Private
            BucketName: myudagrams3bkt
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: false
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
    
    S3BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref S3Bucket
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Action:
                        - s3:GetObject
                        - s3:ListBucket
                      Effect: Allow
                      Resource:
                        - !Sub arn:aws:s3:::${S3Bucket}
                        - !Sub arn:aws:s3:::${S3Bucket}/*
                      Principal: '*'
                  
    S3AccessRole:
        Type: "AWS::IAM::Role"
        Properties: 
          AssumeRolePolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Principal: 
                  Service: 
                    - "ec2.amazonaws.com"
                Action: 
                  - "sts:AssumeRole"
          Path: "/"
          Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: '*'
                  Resource: '*'

    InstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties: 
            Path: "/"
            Roles: 
                - Ref: "S3AccessRole"

    #endregion S3 bucket & access role

    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to LoadBalancer 
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0

    WebServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    sudo apt-get update -y
                    sudo apt-get install awscli -y
                    sudo apt-get install apache2 -y
                    sudo systemctl start apache2.service
                    cd /var/www/html
                    aws s3 sync s3://myudagrams3bkt .
            ImageId: !Ref LatestAmiId
            KeyName: udagram-key
            IamInstanceProfile: !Ref InstanceProfile
            SecurityGroups:
            - Ref: WebServerSecurityGroup
            InstanceType: !Ref InstanceType
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                    VolumeSize: '10'

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - Fn::ImportValue: 
                !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: !Ref AutoScaleMinSize
            MaxSize: !Ref AutoScaleMaxSize
            TargetGroupARNs:
            - Ref: WebAppTargetGroup

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
                - !Ref LoadBalancerSecurityGroup

    LoadBalancerListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn:
                Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: LoadBalancer
            Port: '80'
            Protocol: HTTP

    LoadBalancerListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref 'LoadBalancerListener'
            Priority: 1
            
Outputs:
    LoadBalancerDNSName:
        Value: !Join [ "", [ "http://", !GetAtt LoadBalancer.DNSName]]
        Description: Load Balancer DNS Name     